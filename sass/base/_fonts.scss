//	Workshop: Comprehensive example & Control Structures
//
//	This example will add font icons and font icon support to this website.
//
//	Tasks:
//	1. In the @font-face declaration below, 'fonts/icomoon/fonts/icomoon.' is repeated
//		 five times. Use a sass variable to define it once, instead.
//
//	2. Below, there are selectors for every icon in the font. .icon-icon-name {..}
//		 we can gain some efficiency by doing a number of things
//		 		2a. Create a variable map that holds the icon name and the css content: value (e.g. \e694)
//				2b. Create a placeholder class for the CSS common to each icon
//				2c. using @each, loop through your map to create a class for each icon
//				2d. Create a mixin so that existing classes can be extended to add an icon

@font-face {
	font-family: 'icomoon';
	src: url('fonts/icomoon/fonts/icomoon.eot?-4rvc6i');
	src: url('fonts/icomoon/fonts/icomoon.eot?#iefix-4rvc6i') format('embedded-opentype'), url('fonts/icomoon/fonts/icomoon.woff?-4rvc6i') format('woff'), url('fonts/icomoon/fonts/icomoon.ttf?-4rvc6i') format('truetype'), url('fonts/icomoon/fonts/icomoon.svg?-4rvc6i#icomoon') format('svg');
	font-weight: normal;
	font-style: normal;
}

// Contains the name of our icon and the CSS unicode map
$icons: (
	book: \e604,
	image: \e607,
	coffee: \e603,
	time: \e606,
	twitter: \e602,
	pasta: \e601,
	smoking: \e600,
	mapmarker: \e604,
);

// Print a class for each icon so it can be used from within HTML
@each $icon, $unicode in $icons {
	.icon-#{$icon}:before {
		content: "#{$unicode}";
		font-family: 'icomoon';
		speak: none;
		font-style: normal;
		font-weight: normal;
		font-variant: normal;
		text-transform: none;
		line-height: 1;
		padding-right: .5em;
		/* Better Font Rendering =========== */
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
}

// A mixin that extends the above icon class. So we can use the icon from within CSS
// usage:
@mixin icon($icon) {
	@extend .icon-#{$icon};
}