//
// Mixins
//


//
// Mixin produces a heading (or other block element) with horizontal lines extending
// left and right from the vertical middle.
//
// This version is thanks to http://stackoverflow.com/questions/12687385/how-to-make-the-headline-h1-with-lines-on-the-sides-with-css-only
// and http://dabblet.com/gist/1560674
//
// @param $color defaults to the text color, but can be modified.
@mixin ruled-heading( $color: $color-text ) {
	position: relative;
	text-align: center;
	padding: .2em 0;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;

	&:before,
	&:after {
		content: "";
		position: relative;
		display: inline-block;
		width: 50%;
		height: 1px;
		vertical-align: middle;
		background: $color;
	}

	&:before {
		left: -.5em;
		margin: 0 0 0 -50%;
	}

	&:after {
		left: .5em;
		margin: 0 -50% 0 0;
	}

	&>span {
		display: inline-block;
		vertical-align: middle;
		white-space: normal;
	}
}

//
// Create a grid of images
// Ensures last line is justified cross-browser
// Apply to a block element containing fixed-width children
//
@mixin image-grid( $gutter: 2.5%, $columns: 4) {

	$item-width: ( 100% - ( $gutter * $columns ) ) / $columns;
	@debug $item-width;

	font-size: 0;
	margin-left: -$gutter;

	& > * {
		font-size: $standard-font-size;
		display: inline-block;
		width: $item-width;
		margin-left: $gutter;
		margin-bottom: $gutter;
	}

}

// optical-center
//
// Give this mixin a padding value that you might normally apply equally to
// top and bottom padding on an element (so it's contents are centered).
// It will, instead, give a bit more to the bottom and a bit less to the top so
// the element appears optically centered and takes up the same amount of room.
//
// @param $padding any value that you would normally give to top and bottom padding
// @param $ratio unitless multiplier, defaults to 1.3
@mixin optical-center($padding, $ratio: 1.3) {
	$padding-bottom: $padding * $ratio;
	$padding-top: $padding;

	// now adjust the values so that the total padding-bottom and padding-top
	// is equal to the padding passed in.
	$adjust: ($padding-bottom + $padding-top) - ($padding * 2);
	$padding-bottom: $padding-bottom - $adjust;
	$padding-top: $padding-top - $adjust;

	padding-bottom: $padding-bottom;
	padding-top: $padding-top;
}