//
// Mixins
//


//
// Mixin produces a heading (or other block element) with horizontal lines extending
// left and right from the vertical middle.
//
// This version is thanks to http://stackoverflow.com/questions/12687385/how-to-make-the-headline-h1-with-lines-on-the-sides-with-css-only
// and http://dabblet.com/gist/1560674
//
// @param $color defaults to the text color, but can be modified.
@mixin ruled-heading( $color: $color-text ) {
	position: relative;
	text-align: center;
	padding: .2em 0;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;

	&:before,
	&:after {
		content: "";
		position: relative;
		display: inline-block;
		width: 50%;
		height: 1px;
		vertical-align: middle;
		background: $color;
	}

	&:before {
		left: -.5em;
		margin: 0 0 0 -50%;
	}

	&:after {
		left: .5em;
		margin: 0 -50% 0 0;
	}

	&>span {
		display: inline-block;
		vertical-align: middle;
		white-space: normal;
	}
}

//
// Create a grid of images
// Ensures last line is justified cross-browser
// Apply to a block element containing fixed-width children
//
@mixin image-grid( $gutter: 2.5%, $columns: 4) {

	$item-width: ( 100% - ( $gutter * $columns ) ) / $columns;
	@debug $item-width;

	font-size: 0;
	margin-left: -$gutter;

	& > * {
		font-size: $standard-font-size;
		display: inline-block;
		width: $item-width;
		margin-left: $gutter;
		margin-bottom: $gutter;
	}

}

//	Workshop: mixins
//	Mixins are blocks of css that can be reused in any selector. Unlike @extends,
//	mixins will actually re-print the styles each time. Because they are re-printed
//	each time, mixins can also accept parameters — that block of css can change.
//
//	Rule of thumb: use a mixin when you need parameters and use a placeholder class
//	when you don't.
//
//	Example:
//	@mixin breakpoint($breakpoint) {
//		@media screen and (min-width: $breakpoint) {
//			@content; // @content is a special construct for mixins.
//		}
//	}
//
//	.my-selector {
//		color: green;
//
//		@include breakpoint(1024px) {
//			color: yellow;
//		}
//	}
//
//	Tasks:
//	1. we're creating an optical centering mixin. It should output two css rules:
//			* padding-bottom:
//		  * padding-top:
//	2. Using the mixin definition, see if you can create a mixin.
//	3. Uncomment usages of optical-center throughout the code

// optical-center
//
// Provide this mixin a padding value that you might normally apply equally to
// top and bottom padding on an element (e.g. so its contents are centered).
//
// It will, instead, give a bit more padding to the bottom and a bit less to the top so
// the element appears optically centered and takes up the same amount of room.
//
// The amount of padding that goes to the bottom vs the top is controlled by a second
// $ratio parameter that defaults to 1.3
//
// @param $padding any value that you would normally give to top and bottom padding
// @param $ratio unitless multiplier, defaults to 1.3
